name: Deploy Angular App to Google Cloud VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: angular-app
  CONTAINER_NAME: angular-container

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test -- --watch=false --browsers=ChromeHeadless

    - name: Run linting
      run: npm run lint

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Google Cloud VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.GCP_VPS_HOST }}
        username: ${{ secrets.GCP_VPS_USERNAME }}
        key: ${{ secrets.GCP_VPS_SSH_KEY }}
        port: ${{ secrets.GCP_VPS_PORT || 22 }}
        script: |
          # Detener y eliminar contenedor existente si existe
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
          
          # Eliminar imagen antigua
          docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest || true
          
          # Descargar nueva imagen
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Ejecutar nuevo contenedor
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            -p 80:80 \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Limpiar imágenes no utilizadas
          docker system prune -f

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.GCP_VPS_HOST }}
        username: ${{ secrets.GCP_VPS_USERNAME }}
        key: ${{ secrets.GCP_VPS_SSH_KEY }}
        port: ${{ secrets.GCP_VPS_PORT || 22 }}
        script: |
          # Verificar que el contenedor esté ejecutándose
          docker ps | grep ${{ env.CONTAINER_NAME }}
          
          # Verificar que la aplicación responda
          sleep 10
          curl -f http://localhost || exit 1